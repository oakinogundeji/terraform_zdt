---
    - name: execute zero downtime rolling update for 3 webservers behind a loadbalancer on a target VPC in the eu-west-2 region
      hosts: localhost
      debugger: on_failed
      gather_facts: yes
      tasks:

        - name: get facts about existing vpc
          ec2_vpc_net_facts:
            region: eu-west-2
            filters:
              "tag:Name": '{{ VPC_NAME }}'
          register: vpc_exists

        - debug: var=vpc_exists

        - name: get facts about the ELB
          ec2_elb_facts:
            names: '{{ VPC_NAME }}'-elb
            region: eu-west-2
          register: elb_facts

        - debug: var=elb_facts

        - name: isolate old ec2s
          set_fact:
            old_ec2_1: "{{ elb_facts.elbs[0].instances_inservice[0] }}"
            old_ec2_2: "{{ elb_facts.elbs[0].instances_inservice[1] }}"
            old_ec2_3: "{{ elb_facts.elbs[0].instances_inservice[2] }}"

        - name: get facts about existing public subnets in VPC
          ec2_vpc_subnet_facts:
            region: eu-west-2
            filters:
              vpc-id: '{{ vpc_exists.vpcs[0].vpc_id }}'
              "tag:role": "{{ item }}"
          loop:
            - '{{ VPC_NAME }}'-public-eu-west-2a
            - '{{ VPC_NAME }}'-public-eu-west-2b
            - '{{ VPC_NAME }}'-public-eu-west-2c
          register: subnet_facts

        - debug: var=subnet_facts

        - name: get PWD
          set_fact:
            pwd: "{{ lookup('env','PWD') }}"

        - name: create path to userdata
          set_fact:
            pth: "{{ pwd }}/files/ec2-user-data.sh"

        - name: standup new set of ec2s
          ec2:
            key_name: teliosgrp-eu-west-2
            region: eu-west-2
            instance_type: t2.micro
            image: ami-0fab23d0250b9a47e
            wait: yes
            group: web
            vpc_subnet_id: '{{ item }}'
            assign_public_ip: yes
            #exact_count: 1
            #count_tag:
              #role: stanbicdemo
            instance_tags:
              role: zdt
            user_data: "{{ lookup('file', '{{ pth }}') }}"
          with_items:
            - '{{ subnet_facts.results[0].subnets[0].id }}'
            - '{{ subnet_facts.results[1].subnets[0].id }}'
            - '{{ subnet_facts.results[2].subnets[0].id }}'
          register: new_ec2s_up

        - debug: var=new_ec2s_up

        - name: isolate new ec2s
          set_fact:
            new_ec2_1: "{{ new_ec2s_up.results[0].instance_ids[0] }}"
            new_ec2_2: "{{ new_ec2s_up.results[1].instance_ids[0] }}"
            new_ec2_3: "{{ new_ec2s_up.results[2].instance_ids[0] }}"

        - name: pause for 3 minutes to ensure new ec2s ready
          pause:
            minutes: 3

        - name: remove an old ec2 instance from the ELB
          ec2_elb:
            instance_id: "{{ old_ec2_1 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            state: absent
            wait: yes
            wait_timeout: 300
          register: old_ec2_1_out

        - debug: var=old_ec2_1_out

        - name: add a new ec2 instance to the ELB
          ec2_elb:
            instance_id: "{{ new_ec2_1 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            enable_availability_zone: yes
            state: present
            wait: yes
            wait_timeout: 300
          register: new_ec2_1_up

        - debug: var=new_ec2_1_up

        - name: terminate the old ec2 instance
          ec2:
            state: absent
            region: eu-west-2
            wait: yes
            wait_timeout: 300
            instance_ids:
              - "{{ old_ec2_1 }}"
          register: old_ec2_1_down

        - debug: var=old_ec2_1_down

        - name: remove an old ec2 instance from the ELB
          ec2_elb:
            instance_id: "{{ old_ec2_2 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            state: absent
            wait: yes
            wait_timeout: 300
          register: old_ec2_2_out

        - debug: var=old_ec2_2_out

        - name: add a new ec2 instance to the ELB
          ec2_elb:
            instance_id: "{{ new_ec2_2 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            enable_availability_zone: yes
            state: present
            wait: yes
            wait_timeout: 300
          register: new_ec2_2_up

        - debug: var=new_ec2_2_up

        - name: terminate the old ec2 instance
          ec2:
            state: absent
            region: eu-west-2
            wait: yes
            wait_timeout: 300
            instance_ids:
              - "{{ old_ec2_2 }}"
          register: old_ec2_2_down

        - debug: var=old_ec2_2_down

        - name: remove an old ec2 instance from the ELB
          ec2_elb:
            instance_id: "{{ old_ec2_3 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            state: absent
            wait: yes
            wait_timeout: 300
          register: old_ec2_3_out

        - debug: var=old_ec2_3_out

        - name: add a new ec2 instance to the ELB
          ec2_elb:
            instance_id: "{{ new_ec2_3 }}"
            region: eu-west-2
            ec2_elbs: '{{ VPC_NAME }}'-elb
            enable_availability_zone: yes
            state: present
            wait: yes
            wait_timeout: 300
          register: new_ec2_3_up

        - debug: var=new_ec2_3_up

        - name: terminate the old ec2 instance
          ec2:
            state: absent
            region: eu-west-2
            wait: yes
            wait_timeout: 300
            instance_ids:
              - "{{ old_ec2_3 }}"
          register: old_ec2_3_down

        - debug: var=old_ec2_3_down

        - name: pause for 3 minutes to ensure all set
          pause:
            minutes: 3
